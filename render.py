from datetime import datetime, timedelta

DataLevelMap = tuple[int]

# mapping of characters to the data level which should be in the 5 bit space available for weekdays
CHARACTERS_5_BIT: dict[str, DataLevelMap] = {
    "A": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 4, 0, 0,
          0, 4, 4, 4, 4, 4, 0),

    "B": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 0, 4, 4, 4, 0, 0),

    "C": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 4, 4, 0, 4, 4, 0),

    "D": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 0, 4, 4, 4, 0, 0),

    "E": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 0, 0, 0, 4, 0),

    "F": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 0, 0,
          0, 4, 0, 0, 0, 0, 0),

    "G": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 4, 0, 4, 4, 4, 0),

    "H": (0, 4, 4, 4, 4, 4, 0,
          0, 0, 0, 4, 0, 0, 0,
          0, 4, 4, 4, 4, 4, 0),

    "I": (0, 4, 0, 0, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0),

    "J": (0, 4, 0, 0, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0),

    "K": (0, 4, 4, 4, 4, 4, 0,
          0, 0, 0, 4, 0, 0, 0,
          0, 4, 4, 0, 4, 4, 0),

    "L": (0, 4, 4, 4, 4, 4, 0,
          0, 0, 0, 0, 0, 4, 0,
          0, 0, 0, 0, 0, 4, 0),

    "M": (0, 4, 4, 4, 4, 4, 0,
          0, 0, 4, 4, 0, 0, 0,
          0, 4, 4, 4, 4, 4, 0),

    "N": (0, 4, 4, 4, 4, 4, 0,
          0, 0, 4, 4, 4, 0, 0,
          0, 4, 4, 4, 4, 4, 0),

    "O": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0),

    "P": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 0, 0,
          0, 4, 4, 4, 0, 0, 0),

    "Q": (0, 4, 4, 4, 4, 0, 0,
          0, 4, 0, 0, 4, 4, 0,
          0, 4, 4, 4, 4, 4, 0),

    "R": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 0, 0,
          0, 4, 4, 0, 4, 4, 0),

    "S": (0, 4, 4, 4, 0, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 0, 4, 4, 4, 0),

    "T": (0, 4, 0, 0, 0, 0, 0,
          0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 0, 0, 0),

    "U": (0, 4, 4, 4, 4, 4, 0,
          0, 0, 0, 0, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0),

    "V": (0, 4, 4, 4, 4, 0, 0,
          0, 0, 0, 0, 0, 4, 0,
          0, 4, 4, 4, 4, 0, 0),

    "W": (0, 4, 4, 4, 4, 4, 0,
          0, 0, 0, 4, 4, 0, 0,
          0, 4, 4, 4, 4, 4, 0),

    "X": (0, 4, 4, 0, 4, 4, 0,
          0, 0, 0, 4, 0, 0, 0,
          0, 4, 4, 0, 4, 4, 0),

    "Y": (0, 4, 4, 4, 0, 0, 0,
          0, 0, 0, 4, 4, 4, 0,
          0, 4, 4, 4, 0, 0, 0),

    "Z": (0, 4, 0, 0, 4, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 4, 0, 0, 4, 0),

    "0": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0),

    "1": (0, 4, 0, 0, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0,
          0, 0, 0, 0, 0, 4, 0),

    "2": (0, 4, 0, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 4, 4, 0, 4, 0),

    "3": (0, 4, 0, 0, 0, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0),

    "4": (0, 4, 4, 4, 0, 0, 0,
          0, 0, 0, 4, 0, 0, 0,
          0, 4, 4, 4, 4, 4, 0),

    "5": (0, 4, 4, 4, 0, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 0, 4, 4, 4, 0),

    "6": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 0, 4, 4, 4, 0),

    "7": (0, 4, 0, 0, 0, 0, 0,
          0, 4, 0, 4, 4, 4, 0,
          0, 4, 4, 0, 0, 0, 0),

    "8": (0, 4, 4, 4, 4, 4, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 4, 4, 4, 4, 4, 0),

    "9": (0, 4, 4, 4, 0, 0, 0,
          0, 4, 0, 4, 0, 0, 0,
          0, 4, 4, 4, 4, 4, 0),

    "?": (0, 4, 0, 0, 0, 0, 0,
          0, 4, 0, 4, 0, 4, 0,
          0, 0, 4, 0, 0, 0, 0),

    "!": (0, 0, 0, 0, 0, 0, 0,
          0, 4, 4, 4, 0, 4, 0,
          0, 0, 0, 0, 0, 0, 0),

    "_": (0, 0, 0, 0, 0, 4, 0,
          0, 0, 0, 0, 0, 4, 0,
          0, 0, 0, 0, 0, 4, 0),

    "+": (0, 0, 4, 0, 0, 0, 4,
          4, 4, 0, 0, 0, 4, 0,
          0, 0, 0, 0, 0, 0, 0),

    "-": (0, 0, 0, 0, 0, 0, 4,
          4, 4, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0),

    "%": (0, 4, 0, 0, 4, 4, 0,
          0, 0, 0, 4, 0, 0, 0,
          0, 4, 4, 0, 0, 4, 0),

    "(": (0, 0, 4, 4, 4, 0, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 4, 0, 0, 0, 4, 0),

    ")": (0, 4, 0, 0, 0, 4, 0,
          0, 4, 0, 0, 0, 4, 0,
          0, 0, 4, 4, 4, 0, 0),

    "{": (0, 0, 0, 4, 0, 0, 0,
          0, 4, 4, 0, 4, 4, 0,
          0, 4, 0, 0, 0, 4, 0),

    "}": (0, 4, 0, 0, 0, 4, 0,
          0, 4, 4, 0, 4, 4, 0,
          0, 0, 0, 4, 0, 0, 0),

    "=": (0, 0, 4, 0, 4, 0, 0,
          0, 0, 4, 0, 4, 0, 0,
          0, 0, 4, 0, 4, 0, 0),

    "<": (0, 0, 0, 4, 0, 0, 0,
          0, 0, 4, 0, 4, 0, 0,
          0, 0, 4, 0, 4, 0, 0),

    ">": (0, 0, 4, 0, 4, 0, 0,
          0, 0, 4, 0, 4, 0, 0,
          0, 0, 0, 4, 0, 0, 0),

    "^": (0, 0, 4, 0, 0, 0, 0,
          4, 0, 0, 0, 0, 0, 0,
          4, 0, 0, 0, 0, 0, 0),

    " ": (0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0),

    ":": (0, 0, 0, 0, 0, 0, 0,
          0, 0, 4, 0, 4, 0, 0,
          0, 0, 0, 0, 0, 0, 0),
}


def __get_last_week_end() -> datetime:
    """Retrieve the date of the most recent saturday where we can start adding commit activity."""
    now = datetime.now()

    return now - timedelta(days=(now.isoweekday() + 1) % 7)


def __render_str(s: str) -> DataLevelMap:
    data_level_map = []

    for offset, c in enumerate(s):
        try:
            c_data_level_map = CHARACTERS_5_BIT[c]
        except KeyError:
            raise ValueError(f"character '{c}' cannot be rendered")

        data_level_map.extend(c_data_level_map)
        data_level_map.extend((0, 0, 0, 0, 0, 0, 0))

    return tuple(data_level_map)


def render(obj) -> DataLevelMap:
    if isinstance(obj, str):
        return __render_str(obj)

    raise TypeError(f"cannot render a value of type {type(obj)}")
