from datetime import datetime, timedelta
from typing import Tuple

DataLevelMap = Tuple[Tuple[int]]

# mapping of characters to the data level which should be in the 5 bit space available for weekdays
CHARACTERS_5_BIT: dict[str, DataLevelMap] = {
    "A": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "B": ((0, 0, 0),
          (4, 4, 0),
          (4, 0, 4),
          (4, 4, 4),
          (4, 0, 4),
          (4, 4, 0),
          (0, 0, 0)),
    "C": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 0, 0),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "D": ((0, 0, 0),
          (4, 4, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "E": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 0),
          (4, 4, 0),
          (4, 0, 0),
          (4, 4, 4),
          (0, 0, 0)),
    "F": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 0),
          (4, 4, 0),
          (4, 0, 0),
          (4, 0, 0),
          (0, 0, 0)),
    "G": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "H": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (4, 0, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "I": ((0, 0, 0),
          (4, 4, 4),
          (0, 4, 0),
          (0, 4, 0),
          (0, 4, 0),
          (4, 4, 4),
          (0, 0, 0)),
    "J": ((0, 0, 0),
          (4, 4, 4),
          (0, 0, 4),
          (0, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "K": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 0),
          (4, 0, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "L": ((0, 0, 0),
          (4, 0, 0),
          (4, 0, 0),
          (4, 0, 0),
          (4, 0, 0),
          (4, 4, 4),
          (0, 0, 0)),
    "M": ((0, 0, 0),
          (4, 0, 4),
          (4, 4, 4),
          (4, 4, 4),
          (4, 0, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "N": ((0, 0, 0),
          (4, 0, 4),
          (4, 4, 4),
          (4, 4, 4),
          (4, 4, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "O": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "P": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 4, 4),
          (4, 0, 0),
          (4, 0, 0),
          (0, 0, 0)),
    "Q": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 4, 4),
          (0, 0, 0)),
    "R": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 4, 0),
          (4, 0, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "S": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 0),
          (4, 4, 4),
          (0, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "T": ((0, 0, 0),
          (4, 4, 4),
          (0, 4, 0),
          (0, 4, 0),
          (0, 4, 0),
          (0, 4, 0),
          (0, 0, 0)),
    "U": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "V": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (0, 4, 4),
          (0, 4, 4),
          (0, 0, 4),
          (0, 0, 0)),
    "W": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (4, 4, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "X": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (0, 4, 0),
          (4, 0, 4),
          (4, 0, 4),
          (0, 0, 0)),
    "Y": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 4, 0),
          (0, 4, 0),
          (0, 0, 0)),
    "Z": ((0, 0, 0),
          (4, 4, 4),
          (0, 0, 4),
          (0, 4, 0),
          (4, 0, 0),
          (4, 4, 4),
          (0, 0, 0)),
    "0": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "1": ((0, 0, 0),
          (4, 4, 0),
          (0, 4, 0),
          (0, 4, 0),
          (0, 4, 0),
          (1, 4, 1),
          (0, 0, 0)),
    "2": ((0, 0, 0),
          (4, 4, 4),
          (0, 0, 4),
          (4, 4, 4),
          (4, 0, 0),
          (4, 4, 4),
          (0, 0, 0)),
    "3": ((0, 0, 0),
          (4, 4, 4),
          (0, 0, 4),
          (0, 4, 4),
          (0, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "4": ((0, 0, 0),
          (4, 0, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 4),
          (0, 0, 4),
          (0, 0, 0)),
    "5": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 0),
          (4, 4, 4),
          (0, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "6": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "7": ((0, 0, 0),
          (4, 4, 4),
          (0, 0, 4),
          (0, 4, 0),
          (4, 4, 0),
          (0, 4, 0),
          (0, 0, 0)),
    "8": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 4, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 0)),
    "9": ((0, 0, 0),
          (4, 4, 4),
          (4, 0, 4),
          (4, 4, 4),
          (0, 0, 4),
          (0, 0, 4),
          (0, 0, 0)),
    "?": ((0, 0, 0),
          (4, 4, 0),
          (0, 0, 4),
          (0, 4, 0),
          (0, 0, 0),
          (0, 4, 0),
          (0, 0, 0)),
    "!": ((0, 0, 0),
          (0, 4, 0),
          (0, 4, 0),
          (0, 4, 0),
          (0, 0, 0),
          (0, 4, 0),
          (0, 0, 0)),
    "_": ((0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (4, 4, 4),
          (0, 0, 0)),
    "+": ((0, 0, 0),
          (0, 0, 0),
          (0, 4, 0),
          (4, 4, 4),
          (0, 4, 0),
          (0, 0, 0),
          (0, 0, 0)),
    "-": ((0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (4, 4, 4),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0)),
    "%": ((0, 0, 0),
          (4, 0, 4),
          (0, 0, 4),
          (0, 4, 0),
          (4, 0, 0),
          (4, 0, 4),
          (0, 0, 0)),
    "(": ((0, 0, 0),
          (0, 4, 4),
          (4, 0, 0),
          (4, 0, 0),
          (4, 0, 0),
          (0, 4, 4),
          (0, 0, 0)),
    ")": ((0, 0, 0),
          (4, 4, 0),
          (0, 0, 4),
          (0, 0, 4),
          (0, 0, 4),
          (4, 4, 0),
          (0, 0, 0)),
    "{": ((0, 0, 0),
          (0, 4, 4),
          (0, 4, 0),
          (4, 0, 0),
          (0, 4, 0),
          (0, 4, 4),
          (0, 0, 0)),
    "}": ((0, 0, 0),
          (4, 4, 0),
          (0, 4, 0),
          (0, 0, 4),
          (0, 4, 0),
          (4, 4, 0),
          (0, 0, 0)),
    "=": ((0, 0, 0),
          (0, 0, 0),
          (4, 4, 4),
          (0, 0, 0),
          (4, 4, 4),
          (0, 0, 0),
          (0, 0, 0)),
    "<": ((0, 0, 0),
          (0, 0, 0),
          (0, 4, 4),
          (4, 0, 0),
          (0, 4, 4),
          (0, 0, 0),
          (0, 0, 0)),
    ">": ((0, 0, 0),
          (0, 0, 0),
          (4, 4, 0),
          (0, 0, 4),
          (4, 4, 0),
          (0, 0, 0),
          (0, 0, 0)),
    "^": ((0, 0, 0),
          (0, 4, 0),
          (4, 0, 4),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0)),
    " ": ((0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0),
          (0, 0, 0)),
}


def __get_last_week_end() -> datetime:
    """Retrieve the date of the most recent saturday where we can start adding commit activity."""
    now = datetime.now()

    return now - timedelta(days=(now.isoweekday() + 1) % 7)


def __render_str(s: str) -> DataLevelMap:
    # the amount of bits needed to legibly render the string with empty space between letters
    total_length = len(s) * 3 + len(s) - 1

    data_level_map = [[0 for _ in range(total_length)] for _ in range(7)]

    for offset, c in enumerate(s):
        try:
            c_data_level_map = CHARACTERS_5_BIT[c]
        except KeyError:
            raise ValueError(f"character '{c}' cannot be rendered")

        # merge the DataLevelMap for the current character
        for i in range(7):
            for j in range(3):
                data_level_map[i][offset * 3 + j + offset] = c_data_level_map[i][j]

    return tuple(tuple(i) for i in data_level_map)


def render(obj) -> DataLevelMap:
    if isinstance(obj, str):
        return __render_str(obj)

    raise TypeError(f"cannot render a value of type {type(obj)}")
